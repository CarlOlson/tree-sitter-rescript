===========================================
Unit
===========================================

()

---

(source_file
  (expression_statement (unit)))

===========================================
Nested identifiers
===========================================

Foo.Bar.baz

---

(source_file
  (expression_statement
    (module_nested_identifier
      (module_name)
      (module_name) (identifier))))

===========================================
Tuple
===========================================

(1, 2)

---

(source_file
  (expression_statement
    (tuple (number) (number))))

===========================================
Call
===========================================

min(1, 2)
foo(1, ~bar=3, ())

---

(source_file
  (expression_statement
    (call_expression (identifier) (arguments (number) (number))))
  (expression_statement
    (call_expression
      (identifier)
      (arguments
        (number)
        (labeled_argument (identifier) (number))
        (unit)))))

===========================================
Pipe
===========================================

foo->bar->baz
xs->Array.map(foo)->Array.sum

---

(source_file
  (expression_statement
    (pipe_expression
      (pipe_expression (identifier) (identifier))
      (identifier)))
  (expression_statement
    (pipe_expression
      (call_expression
        (pipe_expression
          (identifier)
          (module_nested_identifier (module_name) (identifier)))
        (arguments (identifier)))
      (module_nested_identifier (module_name) (identifier)))))

===========================================
Record
===========================================

{
  foo: 32,
  bar: "baz",
}

---

(source_file
  (expression_statement
    (record
      (record_field (property_identifier) (number))
      (record_field (property_identifier) (string (string_fragment)))
    )))

===========================================
If/else
===========================================

if predicate {
  foo
};

if predicate {
  foo
} else {
  bar
};

if predicateA {
  foo
} else if predicateB {
  qux
} else if predicateC {
  zoo
} else {
  bar
};

---

(source_file
  (expression_statement
    (if_expression
      (identifier)
      (statement_block (expression_statement (identifier)))))
  (expression_statement
    (if_expression
      (identifier)
      (statement_block (expression_statement (identifier)))
      (else_clause (statement_block (expression_statement (identifier))))))
  (expression_statement
    (if_expression
      (identifier)
      (statement_block (expression_statement (identifier)))
      (else_if_clause
        (identifier)
        (statement_block (expression_statement (identifier))))
      (else_if_clause
        (identifier)
        (statement_block (expression_statement (identifier))))
      (else_clause (statement_block (expression_statement (identifier)))))))

===========================================
Math operators
===========================================

- 1 + 2 / 3;
-. 1.0 +. 2.0 /. 3.0;

---

(source_file
  (expression_statement
    (binary_expression
      (unary_expression (number))
      (binary_expression (number) (number)))
  )
  (expression_statement
    (binary_expression
      (unary_expression (number))
      (binary_expression (number) (number)))
  ))

============================================
Boolean operators
============================================

i || j;
i && j;
!a && !b || !c && !d;

---

(source_file
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression
    (binary_expression
      (unary_expression (identifier))
      (unary_expression (identifier)))
    (binary_expression
      (unary_expression (identifier))
      (unary_expression (identifier))))))

============================================
Arrays
============================================

[];
[1];
[1, 2];
[1, 2,];

---

(source_file
  (expression_statement (array))
  (expression_statement (array (number)))
  (expression_statement (array (number) (number)))
  (expression_statement (array (number) (number))))
