===========================================
Unit
===========================================

()

---

(source_file
  (expression_statement (unit)))

===========================================
Parenthesized expressions
===========================================

(5)
(())

---

(source_file
  (expression_statement (parenthesized_expression (number)))
  (expression_statement (parenthesized_expression (unit))))

===========================================
Nested identifiers
===========================================

Foo.Bar.baz
Foo.Bar.baz.qux

---

(source_file
  (expression_statement
    (value_identifier_path
      (module_identifier)
      (module_identifier) (value_identifier)))
  (expression_statement
    (member_expression
      (value_identifier_path
        (module_identifier)
        (module_identifier) (value_identifier))
      (property_identifier))))

===========================================
Escape identifiers
===========================================

\"+."

---

(source_file (expression_statement (value_identifier)))

===========================================
Tuple
===========================================

(1, 2)
(1, 2,)

---

(source_file
  (expression_statement
    (tuple (number) (number)))
  (expression_statement
    (tuple (number) (number))))

===========================================
Call expression
===========================================

min(1, 2)
foo(3, ~bar=4, ~pun, ())
bar(~x?, ~y=?oldY,)
qux(. 1)
keep(
  item =>
    item->Foo.bar == 5
)

---

(source_file
  (expression_statement
    (call_expression
      function: (value_identifier)
      arguments: (arguments (number) (number))))
  (expression_statement
    (call_expression
      function: (value_identifier)
      arguments: (arguments
        (number)
        (labeled_argument
          label: (value_identifier)
          value: (number))
        (labeled_argument
          label: (value_identifier))
        (unit))))
  (expression_statement
    (call_expression
      function: (value_identifier)
      arguments: (arguments
        (labeled_argument
          label: (value_identifier))
        (labeled_argument
          label: (value_identifier)
          value: (value_identifier)))))
  (expression_statement
    (call_expression
      function: (value_identifier)
      arguments: (arguments (uncurry) (number))))
  (expression_statement
    (call_expression
      function: (value_identifier)
      arguments: (arguments
        (function
          parameter: (value_identifier)
          body: (binary_expression
            left: (pipe_expression
              (value_identifier)
              (value_identifier_path
                (module_identifier)
                (value_identifier)))
            right: (number)))))))

===========================================
Pipe
===========================================

foo->bar->baz
foo |> bar |> baz
xs->Array.map(foo)->Array.sum
5->Some

bbox
->outset

---

(source_file
 (expression_statement
    (pipe_expression
      (pipe_expression (value_identifier) (value_identifier))
      (value_identifier)))
 (expression_statement
    (pipe_expression
      (pipe_expression (value_identifier) (value_identifier))
      (value_identifier)))
  (expression_statement
    (pipe_expression
      (call_expression
        (pipe_expression
          (value_identifier)
          (value_identifier_path (module_identifier) (value_identifier)))
        (arguments (value_identifier)))
      (value_identifier_path (module_identifier) (value_identifier))))
  (expression_statement
    (pipe_expression
      (number)
      (variant_identifier)))
  (expression_statement
    (pipe_expression
      (value_identifier)
      (value_identifier))))

===========================================
Record
===========================================

{
  ...old,
  foo: 32,
  bar: "baz",
  qux,
}

{a, b, c}

---

(source_file
  (expression_statement
    (record
      (spread_element (value_identifier))
      (record_field (property_identifier) (number))
      (record_field (property_identifier) (string (string_fragment)))
      (record_field (property_identifier))))
  (expression_statement
    (record
      (record_field (property_identifier))
      (record_field (property_identifier))
      (record_field (property_identifier)))))

===========================================
Object
===========================================

{
  "foo": 32,
  "bar": "baz",
}

{ .  "x": 1 }
{ .. "x": 1 }
{ .. }

---

(source_file
  (expression_statement
    (object
      (field
        (property_identifier (string_fragment))
        (number))
      (field
        (property_identifier (string_fragment))
        (string (string_fragment)))
    ))
  (expression_statement
    (object (field
      (property_identifier (string_fragment)) (number))))
  (expression_statement
    (object (field
      (property_identifier (string_fragment)) (number))))
  (expression_statement
    (object)))

===========================================
If/else
===========================================

if predicate {
  foo
}

if predicate {
  foo
} else {
  bar
}

if predicateA {
  foo
} else if predicateB {
  qux
} else if predicateC {
  zoo
} else {
  bar
}

---

(source_file
  (expression_statement
    (if_expression
      (value_identifier)
      (block (expression_statement (value_identifier)))))
  (expression_statement
    (if_expression
      (value_identifier)
      (block (expression_statement (value_identifier)))
      (else_clause (block (expression_statement (value_identifier))))))
  (expression_statement
    (if_expression
      (value_identifier)
      (block (expression_statement (value_identifier)))
      (else_if_clause
        (value_identifier)
        (block (expression_statement (value_identifier))))
      (else_if_clause
        (value_identifier)
        (block (expression_statement (value_identifier))))
      (else_clause (block (expression_statement (value_identifier)))))))

===========================================
Switch of literals
===========================================

switch foo {
| 1 | 2 => "few"
| _ =>
  let s = "very "
  s ++ "many"
}

---

(source_file
  (expression_statement
    (switch_expression
      (value_identifier)
      (switch_match
        (number)
        (number)
        (expression_statement (string (string_fragment))))
      (switch_match
        (value_identifier)
        (let_binding (value_identifier) (string (string_fragment)))
        (expression_statement
          (binary_expression
            (value_identifier)
            (string (string_fragment))))))))

===========================================
Switch of variants
===========================================

switch foo {
| Some(x as qux: int, {y, z}) => x
| Option.None => 42
}

---

(source_file
  (expression_statement
    (switch_expression
      (value_identifier)
      (switch_match
        (variant_pattern
          (variant_identifier)
          (formal_parameters
            (value_identifier)
            (as_aliasing (value_identifier))
            (type_annotation (type_identifier))
            (record_pattern
              (shorthand_property_identifier_pattern)
              (shorthand_property_identifier_pattern))))
        (expression_statement (value_identifier)))
      (switch_match
        (variant_pattern
          (nested_variant_identifier
            (module_identifier)
            (variant_identifier)))
        (expression_statement (number))))))

===========================================
Switch of polyvars
===========================================

switch foo {
| #Bar => 42
| #Qux(a as bar: int, 3) as qux => 99
}

---

(source_file
  (expression_statement
    (switch_expression
      (value_identifier)
      (switch_match
        (polyvar_pattern (polyvar_identifier))
        (expression_statement (number)))
      (switch_match
        (polyvar_pattern
          (polyvar_identifier)
          (formal_parameters
            (value_identifier)
            (as_aliasing (value_identifier))
            (type_annotation (type_identifier))
            (number)))
        (as_aliasing (value_identifier))
        (expression_statement (number))))))

===========================================
Switch of vars
===========================================

switch foo {
| x if x > 42 && x < 99 => x
| _ => 42
}

---

(source_file
  (expression_statement
    (switch_expression
      (value_identifier)
      (switch_match
        (value_identifier)
        (switch_pattern_condition
          (binary_expression
            (binary_expression (value_identifier) (number))
            (binary_expression (value_identifier) (number))))
        (expression_statement (value_identifier)))
      (switch_match
        (value_identifier)
        (expression_statement (number))))))

===========================================
Switch of tuples
===========================================

switch (foo, bar) {
| (42, 99 as zoo) => 42
| (_, _) => 13
}

---

(source_file
  (expression_statement
    (switch_expression
      (tuple (value_identifier) (value_identifier))
      (switch_match
        (tuple
          (number)
          (number)
          (as_aliasing (value_identifier)))
        (expression_statement (number)))
      (switch_match
        (tuple_pattern (value_identifier) (value_identifier))
        (expression_statement (number))))))

===========================================
Switch of lists
===========================================

switch foo {
| list{current as qux, ...others} => 1
| list{1, 2, x} => 2
| list{1, } => 3
| list{...others} => 4
}

---

(source_file
  (expression_statement
    (switch_expression
      (value_identifier)
      (switch_match
        (list_pattern
          (value_identifier)
          (as_aliasing (value_identifier))
          (spread_pattern (value_identifier)))
        (expression_statement (number)))
      (switch_match
        (list_pattern (number) (number) (value_identifier))
        (expression_statement (number)))
      (switch_match
        (list_pattern (number))
        (expression_statement (number)))
      (switch_match
        (list_pattern (spread_pattern (value_identifier)))
        (expression_statement (number))))))

===========================================
Switch of arrays
===========================================

switch foo {
| [head, ...others] => 1
| [1, 2 as bar, x] => 2
| [1,
  ] => 3
| [...others] => 4
}

---

(source_file
  (expression_statement
    (switch_expression
      (value_identifier)
      (switch_match
        (array_pattern (value_identifier) (spread_pattern (value_identifier)))
        (expression_statement (number)))
      (switch_match
        (array_pattern
          (number)
          (number)
          (as_aliasing (value_identifier))
          (value_identifier))
        (expression_statement (number)))
      (switch_match
        (array_pattern (number))
        (expression_statement (number)))
      (switch_match
        (array_pattern (spread_pattern (value_identifier)))
        (expression_statement (number))))))

===========================================
Switch exceptions
===========================================

switch parseExn(str) {
| json => 42
| exception Js.Exn.Error(obj) => 99
}

---

(source_file
  (expression_statement
    (switch_expression
      (call_expression (value_identifier) (arguments (value_identifier)))
      (switch_match (value_identifier) (expression_statement (number)))
      (switch_match
        (exception
          (variant_pattern
            (nested_variant_identifier (module_identifier) (module_identifier) (variant_identifier))
            (formal_parameters (value_identifier))))
        (expression_statement (number))))))

===========================================
Math operators
===========================================

- 1 + 2 / 3
-. 1.0 +. 2.0 /. 3.0

---

(source_file
  (expression_statement
    (binary_expression
      (unary_expression (number))
      (binary_expression (number) (number)))
  )
  (expression_statement
    (binary_expression
      (unary_expression (number))
      (binary_expression (number) (number)))
  ))

============================================
Boolean operators
============================================

i || j;
i && j;
!a && !b || !c && !d;

---

(source_file
  (expression_statement (binary_expression (value_identifier) (value_identifier)))
  (expression_statement (binary_expression (value_identifier) (value_identifier)))
  (expression_statement (binary_expression
    (binary_expression
      (unary_expression (value_identifier))
      (unary_expression (value_identifier)))
    (binary_expression
      (unary_expression (value_identifier))
      (unary_expression (value_identifier))))))

============================================
String operators
============================================

s1 ++ s2
s1 ++ s2 ++ s3

---

(source_file
  (expression_statement (binary_expression (value_identifier) (value_identifier)))
  (expression_statement (binary_expression
    (binary_expression (value_identifier) (value_identifier))
    (value_identifier))))

==============================================
Ternaries
==============================================

condition ? case1 : case2

condition
  ? case1
  : case2

---

(source_file
  (expression_statement (ternary_expression
    (value_identifier) (value_identifier) (value_identifier)))
  (expression_statement (ternary_expression
    (value_identifier) (value_identifier) (value_identifier))))

============================================
Arrays
============================================

[]
[1]
[1, 2]

[
  1,
  2,
]

---

(source_file
  (expression_statement (array))
  (expression_statement (array (number)))
  (expression_statement (array (number) (number)))
  (expression_statement (array (number) (number))))

============================================
Lists
============================================

list{}
list{1}
list{1,}
list{
  1,
  2,
}

list{ 1, 2, ...xs }
list{ ...xs, 1, 2 }

---

(source_file
  (expression_statement (list))
  (expression_statement (list (number)))
  (expression_statement (list (number)))
  (expression_statement (list (number) (number)))
  (expression_statement (list (number) (number) (spread_element (value_identifier))))
  (expression_statement (list (spread_element (value_identifier)) (number) (number))))

============================================
Member expressions
============================================

foo.bar.baz
foo.ModuleName.bar

---

(source_file
  (expression_statement
    (member_expression
      (member_expression (value_identifier) (property_identifier))
      (property_identifier)))
  (expression_statement
    (member_expression
      (value_identifier)
      (module_identifier)
      (property_identifier))))

============================================
Subscript expressions
============================================

myArray[42]
myObj["foo"]

---

(source_file
  (expression_statement (subscript_expression (value_identifier) (number)))
  (expression_statement
    (subscript_expression (value_identifier) (string (string_fragment)))))

============================================
Variants
============================================

Foo
Foo(42)
Foo(qux, { bar: 3 }, )

---

(source_file
  (expression_statement (variant (variant_identifier)))
  (expression_statement (variant (variant_identifier) (arguments (number))))
  (expression_statement
    (variant
      (variant_identifier)
      (arguments
        (value_identifier)
        (record (record_field (property_identifier) (number)))))))

============================================
Extensions
============================================

%debugger
%re("/[^1-9]/g")
%%raw("function () { return 42; }")

---

(source_file
  (expression_statement
    (extension_expression (extension_identifier)))
  (expression_statement
    (extension_expression
      (extension_identifier)
      (arguments (string (string_fragment)))))
  (expression_statement
    (extension_expression
      (extension_identifier)
      (arguments (string (string_fragment))))))
