===========================================
Unit
===========================================

()

---

(source_file
  (expression_statement (unit)))

===========================================
Parenthesized expressions
===========================================

(5)
(())

---

(source_file
  (expression_statement (parenthesized_expression (number)))
  (expression_statement (parenthesized_expression (unit))))

===========================================
Nested identifiers
===========================================

Foo.Bar.baz

---

(source_file
  (expression_statement
    (module_nested_identifier
      (module_name)
      (module_name) (identifier))))

===========================================
Escape identifiers
===========================================

\"+."

---

(source_file (expression_statement (identifier)))

===========================================
Tuple
===========================================

(1, 2)
(1, 2,)

---

(source_file
  (expression_statement
    (tuple (number) (number)))
  (expression_statement
    (tuple (number) (number))))

===========================================
Call
===========================================

min(1, 2)
foo(1, ~bar=3, ())
bar(~x?)

---

(source_file
  (expression_statement
    (call_expression (identifier) (arguments (number) (number))))
  (expression_statement
    (call_expression
      (identifier)
      (arguments
        (number)
        (labeled_argument (identifier) (number))
        (unit))))
  (expression_statement
    (call_expression
      (identifier)
      (arguments
        (labeled_argument (identifier) (optional))))))

===================================================
Call with lambda
===================================================

keep(item => item->Foo.bar == 5)

---

(source_file
  (expression_statement
    (call_expression
      (identifier)
      (arguments
        (function
          (identifier)
          (binary_expression
            (pipe_expression
              (identifier)
              (module_nested_identifier (module_name) (identifier)))
            (number)))))))

===========================================
Pipe
===========================================

foo->bar->baz
xs->Array.map(foo)->Array.sum
5->Some

bbox
->outset

---

(source_file
  (expression_statement
    (pipe_expression
      (pipe_expression (identifier) (identifier))
      (identifier)))
  (expression_statement
    (pipe_expression
      (call_expression
        (pipe_expression
          (identifier)
          (module_nested_identifier (module_name) (identifier)))
        (arguments (identifier)))
      (module_nested_identifier (module_name) (identifier))))
  (expression_statement
    (pipe_expression
      (number)
      (variant_identifier)))
  (expression_statement
    (pipe_expression
      (identifier)
      (identifier))))

===========================================
Record
===========================================

{
  foo: 32,
  bar: "baz",
}

---

(source_file
  (expression_statement
    (record
      (record_field (property_identifier) (number))
      (record_field (property_identifier) (string (string_fragment)))
    )))

===========================================
Object
===========================================

{
  "foo": 32,
  "bar": "baz",
}

{ .  "x": 1 }
{ .. "x": 1 }
{ .. }

---

(source_file
  (expression_statement
    (object
      (field
        (property_identifier (string_fragment))
        (number))
      (field
        (property_identifier (string_fragment))
        (string (string_fragment)))
    ))
  (expression_statement
    (object (field
      (property_identifier (string_fragment)) (number))))
  (expression_statement
    (object (field
      (property_identifier (string_fragment)) (number))))
  (expression_statement
    (object)))

===========================================
If/else
===========================================

if predicate {
  foo
}

if predicate {
  foo
} else {
  bar
}

if predicateA {
  foo
} else if predicateB {
  qux
} else if predicateC {
  zoo
} else {
  bar
}

---

(source_file
  (expression_statement
    (if_expression
      (identifier)
      (block (expression_statement (identifier)))))
  (expression_statement
    (if_expression
      (identifier)
      (block (expression_statement (identifier)))
      (else_clause (block (expression_statement (identifier))))))
  (expression_statement
    (if_expression
      (identifier)
      (block (expression_statement (identifier)))
      (else_if_clause
        (identifier)
        (block (expression_statement (identifier))))
      (else_if_clause
        (identifier)
        (block (expression_statement (identifier))))
      (else_clause (block (expression_statement (identifier)))))))

===========================================
Switch of literals
===========================================

switch foo {
| 1 | 2 => "few"
| _ => "many"
}

---

(source_file
  (expression_statement
    (switch_expression
      (identifier)
      (switch_match (number) (number) (string (string_fragment)))
      (switch_match (identifier) (string (string_fragment))))))

===========================================
Switch of variants
===========================================

switch foo {
| Some(x) => x
| None => 42
}

---

(source_file
  (expression_statement
    (switch_expression
      (identifier)
      (switch_match
        (variant (variant_identifier) (arguments (identifier)))
        (identifier))
      (switch_match
        (variant (variant_identifier))
        (number)))))

===========================================
Math operators
===========================================

- 1 + 2 / 3
-. 1.0 +. 2.0 /. 3.0

---

(source_file
  (expression_statement
    (binary_expression
      (unary_expression (number))
      (binary_expression (number) (number)))
  )
  (expression_statement
    (binary_expression
      (unary_expression (number))
      (binary_expression (number) (number)))
  ))

============================================
Boolean operators
============================================

i || j;
i && j;
!a && !b || !c && !d;

---

(source_file
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression (identifier) (identifier)))
  (expression_statement (binary_expression
    (binary_expression
      (unary_expression (identifier))
      (unary_expression (identifier)))
    (binary_expression
      (unary_expression (identifier))
      (unary_expression (identifier))))))

==============================================
Ternaries
==============================================

condition ? case1 : case2

---

(source_file
  (expression_statement (ternary_expression
    (identifier) (identifier) (identifier))))

============================================
Arrays
============================================

[]
[1]
[1, 2]

[
  1,
  2,
]

---

(source_file
  (expression_statement (array))
  (expression_statement (array (number)))
  (expression_statement (array (number) (number)))
  (expression_statement (array (number) (number))))

============================================
Subscript expressions
============================================

myArray[42]
myObj["foo"]

---

(source_file
  (expression_statement (subscript_expression (identifier) (number)))
  (expression_statement
    (subscript_expression (identifier) (string (string_fragment)))))

============================================
Variants
============================================

Foo
Foo(42)
Foo(qux, { bar: 3 }, )

---

(source_file
  (expression_statement (variant (variant_identifier)))
  (expression_statement (variant (variant_identifier) (arguments (number))))
  (expression_statement
    (variant
      (variant_identifier)
      (arguments
        (identifier)
        (record (record_field (property_identifier) (number)))))))
