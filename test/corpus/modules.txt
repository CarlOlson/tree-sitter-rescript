===========================================
Include
===========================================

include Foo;
include Foo.Bar;

---

(source_file
  (include_statement (module_name))
  (include_statement
    (nested_module_expression (module_name) (module_name))))

===========================================
Definition
===========================================

module MyModule = {
  type t
}

---

(source_file
  (module_declaration
    (module_name)
    (block (type_declaration (type_identifier)))))

===========================================
Alias
===========================================

module Q = Foo.Bar.Qux

---

(source_file
  (module_declaration
    (module_name)
    (nested_module_expression
      (nested_module_expression (module_name) (module_name))
      (module_name))))

===========================================
Function types
===========================================

type fooA = t => float;
type fooB = (t) => float;
type fooC = (t1, t2) => float;

---

(source_file
  (type_declaration
    (type_identifier)
    (function_type
      (function_type_parameters (type_identifier))
      (type_identifier)))
  (type_declaration
    (type_identifier)
    (function_type
      (function_type_parameters (type_identifier))
      (type_identifier)))
  (type_declaration
    (type_identifier)
    (function_type
      (function_type_parameters (type_identifier) (type_identifier))
      (type_identifier))))

===========================================
Object types
===========================================

type t = {..}
type t = {.}
type t = {.. "my-field": int }
type t = {
  "my-field": int,
  "my-field-two": string,
}

---

(source_file
  (type_declaration
    (type_identifier)
    (object_type))
  (type_declaration
    (type_identifier)
    (object_type))
  (type_declaration
    (type_identifier)
    (object_type
      (field (property_identifier (string_fragment)) (type_identifier))))
  (type_declaration
    (type_identifier)
    (object_type
      (field (property_identifier (string_fragment)) (type_identifier))
      (field (property_identifier (string_fragment)) (type_identifier)))))

===========================================
Externals
===========================================

external aX: t => float = "aX";
@val external foo: int = "foo";
@bs.val external foo: int = "foo";
@module("libfoo") @new external foo: t = "Foo";

---

(source_file
  (external_declaration
    (identifier)
    (type_annotation
      (function_type
        (function_type_parameters (type_identifier))
        (type_identifier)))
    (string (string_fragment)))
  (decorated
    (decorator (decorator_identifier))
    (external_declaration
      (identifier)
      (type_annotation (type_identifier))
      (string (string_fragment))))
  (decorated
    (decorator (decorator_identifier))
    (external_declaration
      (identifier)
      (type_annotation (type_identifier))
      (string (string_fragment))))
  (decorated
    (decorator
      (decorator_identifier)
      (decorator_arguments (string (string_fragment))))
    (decorator (decorator_identifier))
    (external_declaration
      (identifier)
      (type_annotation (type_identifier))
      (string (string_fragment)))))
