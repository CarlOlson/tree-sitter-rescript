===========================================
Open
===========================================

open Foo
open! Foo.Bar

---

(source_file
  (open_statement (module_name))
  (open_statement
    (nested_module_expression (module_name) (module_name))))

===========================================
Include
===========================================

include Foo
include Foo.Bar

---

(source_file
  (include_statement (module_name))
  (include_statement
    (nested_module_expression (module_name) (module_name))))

===========================================
Definition
===========================================

module MyModule = {
  type t
}

---

(source_file
  (module_declaration
    (module_name)
    (block (type_declaration (type_identifier)))))

===========================================
Alias
===========================================

module Q = Foo.Bar.Qux

---

(source_file
  (module_declaration
    (module_name)
    (nested_module_expression
      (nested_module_expression (module_name) (module_name))
      (module_name))))

===========================================
Externals
===========================================

external aX: t => float = "aX"
@val external foo: int = "foo"
@bs.val external foo: int = "foo"
@module("libfoo") @new external foo: t = "Foo"
external _makeStyles: ({..}, . unit) => {..} = "makeStyles"

---

(source_file
  (external_declaration
    (identifier)
    (type_annotation
      (function_type
        (function_type_parameters (type_identifier))
        (type_identifier)))
    (string (string_fragment)))
  (decorated
    (decorator (decorator_identifier))
    (external_declaration
      (identifier)
      (type_annotation (type_identifier))
      (string (string_fragment))))
  (decorated
    (decorator (decorator_identifier))
    (external_declaration
      (identifier)
      (type_annotation (type_identifier))
      (string (string_fragment))))
  (decorated
    (decorator
      (decorator_identifier)
      (decorator_arguments (string (string_fragment))))
    (decorator (decorator_identifier))
    (external_declaration
      (identifier)
      (type_annotation (type_identifier))
      (string (string_fragment))))
  (external_declaration
    (identifier)
    (type_annotation
      (function_type
        (function_type_parameters
          (object_type)
          (unit_type))
        (object_type)))
    (string (string_fragment))))
