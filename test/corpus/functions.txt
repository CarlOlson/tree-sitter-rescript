===================================================
Simple parameters
===================================================

a => 1;
() => 2;
(d, e) => 3;
(f, g) => {
  h
};
(trailing,) => 4;
(h, trailing,) => 5;
(set, kv) => 2;

---

(source_file
  (expression_statement (function
    (identifier)
    (number)))
  (expression_statement (function
    (formal_parameters)
    (number)))
  (expression_statement (function
    (formal_parameters (identifier) (identifier))
    (number)))
  (expression_statement (function
    (formal_parameters (identifier) (identifier))
    (block
      (expression_statement (identifier)))))
  (expression_statement (function
    (formal_parameters (identifier))
    (number)))
  (expression_statement (function
    (formal_parameters (identifier) (identifier))
    (number)))
  (expression_statement (function
    (formal_parameters (identifier) (identifier)) (number))))

===================================================
Type annotations
===================================================

(x: int, ~y: float): int => 5;

---

(source_file
  (expression_statement
    (function
      parameters: (formal_parameters
        (positional_parameter (identifier) (type_annotation (type_identifier)))
        (labeled_parameter (identifier) (type_annotation (type_identifier))))
      return_type: (type_annotation (type_identifier))
      body: (number))))

===================================================
Parameter defaults
===================================================

(~x: int=3, ~y=4.0, ~z: int=?, ~w=?, ()) => 5;

---

(source_file
  (expression_statement
    (function
      parameters: (formal_parameters
        (labeled_parameter
          (identifier)
          (type_annotation (type_identifier))
          default_value: (number))
        (labeled_parameter
          (identifier)
          default_value: (number))
        (labeled_parameter
          (identifier)
          (type_annotation (type_identifier))
          default_value: (optional))
        (labeled_parameter
          (identifier)
          default_value: (optional))
        (unit))
      body: (number))))

===================================================
Record pattern
===================================================

({fooField, barField}) => 5

---

(source_file
  (expression_statement (function
    (formal_parameters
      (record_pattern
        (shorthand_property_identifier_pattern)
        (shorthand_property_identifier_pattern)))
    (number))))

===================================================
Operator precendence
===================================================

(a) => a->Foo.bar == 5

---

(source_file
  (expression_statement (function
    (formal_parameters (identifier))
    (binary_expression
      (pipe_expression
        (identifier)
        (module_nested_identifier (module_name) (identifier)))
      (number)))))
