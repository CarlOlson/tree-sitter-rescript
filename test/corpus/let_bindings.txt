============================================
Plain
============================================

let a = 5
let b = a
let c = #foo

---

(source_file
  (let_binding (identifier) (number))
  (let_binding (identifier) (identifier))
  (let_binding (identifier) (polyvar (polyvar_identifier))))

============================================
Tuple destructuring
============================================

let (a, b, (c, d)) = foo

---

(source_file
  (let_binding
    (tuple_pattern
      (identifier)
      (identifier)
      (tuple_pattern (identifier) (identifier)))
    (identifier)))

============================================
Block
============================================

let x = {
  3
  4
}

---

(source_file
  (let_binding
    (identifier)
    (block
      (expression_statement (number))
      (expression_statement (number)))))

============================================
Annotated
============================================

let a: int = 5
let b: 'a => unit = ignore

---

(source_file
  (let_binding
    (identifier)
    (type_annotation (type_identifier))
    (number))
  (let_binding
    (identifier)
    (type_annotation
      (function_type
        (function_type_parameters (type_identifier))
        (unit_type)))
    (identifier)))

============================================
Recursive
============================================

let rec foo = n => foo(n-1)

---

(source_file
  (let_binding
    (identifier)
      (function
        (identifier)
        (call_expression
          (identifier)
          (arguments
            (binary_expression
              (identifier)
              (number)))))))
